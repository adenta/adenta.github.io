<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Denta</title>
    <description>Hi! I am Andrew Denta. I make balloons and websites. Feel free to check out my various projects!
</description>
    <link>http://denta.co/</link>
    <atom:link href="http://denta.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Jul 2016 16:17:56 -0700</pubDate>
    <lastBuildDate>Mon, 04 Jul 2016 16:17:56 -0700</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Gerrymandering: The Game</title>
        <description>&lt;p&gt;My &lt;a href=&quot;https://www.linkedin.com/in/mitchel-hill-4205b58b&quot;&gt;sister’s boyfriend&lt;/a&gt; and I had this idea for a game about gerrymandering for a while. I have tried my best to explain it through slides and an HTML5 video demo.&lt;/p&gt;

&lt;p&gt;I think this would be a great tool for the classroom. A quick game that would teach people how gerrymandering works. I have suspended work on this project, until I can find more teachers interested in using this in their classrooms. Feel free to reach out at my contact info in the footer.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 01:45:31 -0700</pubDate>
        <link>http://denta.co/gerrymandering-the-game</link>
        <guid isPermaLink="true">http://denta.co/gerrymandering-the-game</guid>
        
        
        <category>project</category>
        
        <category>D3.js</category>
        
        <category>JavaScript</category>
        
        <category>Materialize</category>
        
        <category>Gulp</category>
        
      </item>
    
      <item>
        <title>Mario Chase</title>
        <description>&lt;p&gt;This semester, we did a research project on a game called Mario Chase. Rules can be found &lt;a href=&quot;http://www.mariowiki.com/Mario_Chase&quot;&gt;here&lt;/a&gt;. The game is basically hide-and-seek. The only change is that those who are seeking (toads) the person hiding  (Mario) know how far away they are from the person. The person hiding also gets to move around throughout the game. This problem would be trivial if we knew where on the board the seekers were, however; we do not have that metric. This is also not a problem that can be found through graph traversal methods, because the goal state (where Mario is) changes frequently. Graph search also does not work because we do not know &lt;em&gt;what&lt;/em&gt; the goal state is, only how far away we are from it.&lt;/p&gt;

&lt;p&gt;We ran several algorithms, and found the most efficient one for finding Mario was rather simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for each toad:
      replace the previous distance to mario with current distance.
      recalculate the toads distance to mario.

      if the previous distance is smaller than the current distance:
          move the toad in a random direction
      else:
          move the toad in the same direction
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It was great to work on this with my friends &lt;a href=&quot;https://www.linkedin.com/in/adam-peters-799707aa&quot;&gt;Adam Peters&lt;/a&gt; and Lee Hiler!&lt;/p&gt;

&lt;p&gt;EDIT: The github repository is located &lt;a href=&quot;https://github.com/adenta/Mario-Chase-Theatre&quot;&gt;here&lt;/a&gt;. The system was designed to model mario chase as simply as possible. We render the maps, and than we save them as JSON. We than made a quick node server to fetch these data files, and &lt;em&gt;view&lt;/em&gt; them in browser.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 01:45:31 -0700</pubDate>
        <link>http://denta.co/mario-chase</link>
        <guid isPermaLink="true">http://denta.co/mario-chase</guid>
        
        
        <category>project</category>
        
        <category>D3.js</category>
        
        <category>python</category>
        
        <category>JavaScript</category>
        
        <category>Materialize</category>
        
      </item>
    
      <item>
        <title>Gerrymandering</title>
        <description>&lt;p&gt;&lt;em&gt;The following is an excerpt from a term paper I am working on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every ten years, each of the 50 US states redraws the boundaries for
congressional districts. The lines are redrawn so all of the districts contain about an equal
number of people. Each congressional district votes on a person to go to the US House of
Representatives. As one can imagine, the political districts control a bit of power, which is
shifted around every time the districts are redrawn. It is commonly believed that whichever
party is in control of the redistricting process could misuse this ability to redraw districts, and
rig elections in their favor. This practice is referred to as “gerrymandering.” We can see how
this might work in this illustration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gerrymandering-explained.png&quot; alt=&quot;Gerrymandering in Action&quot; class=&quot;responsive-img materialboxed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I want to see if we can detect gerrymandering when looking at the results of many US elections. The Federal Election Commision (FEC) has a &lt;a href=&quot;http://www.fec.gov/pubrec/electionresults.shtml&quot;&gt;website&lt;/a&gt; that provides historic election results for congressional districts. Unfortunately, The spreadsheets they provide only go back as far as the year 2000, everything provided before that point is a PDF. This gives us eight different elections to look at.&lt;/p&gt;

&lt;p&gt;I went through, and scraped as much data as possible from these spreadsheets. They had inconsistent formatting, and I was able to get 97% of the elections into a JSON archive easily.&lt;/p&gt;

&lt;p&gt;The most interesting thing I found was the trends that present themselves when looking at gerrymandering on a graph. Below we see the percentage of Republican votes over total votes for state of North Carolina, over time. North Carolina had it’s districts redrawn after a &lt;a href=&quot;http://myfox8.com/2016/02/05/federal-court-invalidates-maps-of-north-carolinas-1st-12th-congressional-districts/&quot;&gt;widespread reporting&lt;/a&gt; of gerrymandering in the 2010 election cycle. We see that the districts cluster around a 60% concentration of Republicans. This is what is most advantageous for the Republicans: maintaining a majority in most states, and losing big in three.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/NC-Votes.png&quot; alt=&quot;Gerrymandering in Action&quot; class=&quot;responsive-img materialboxed&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;

&lt;p&gt;I have tried to make useful things for the open source community before, but always seem to fall short. I will be releasing the repository on github soon, but am not sure how useful it will be to others. When scraping the excel files, about 5% of the data was was not scraped properly. I did not need it for my analysis. It seems the issue was in the order that the political races were listed. If the first race was not the winning race, than my scraper did not return the proper output.&lt;/p&gt;

&lt;p&gt;When reading in the votes for each race, There seemed to be four cases. For example, with the number 56789, it might appear:
 - As a string (eg: “56,789”)
 - As a list (eg: “[56,789]”)
 - As a floating point (eg: 56789.0)
 - As a string saying, “Unopposed”&lt;/p&gt;

&lt;p&gt;For my sake, I saved unopposed elections with a flag of 0. I gave missing elections a flag of -1. I see this was a bad decision for others to use my data. I should have saved the flags as strings, leaving unopposed elections alone. This would have been more semantic. This would have also prevented people from doing some bad math, treating the -1’s and 0’s as literal values.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 May 2016 23:45:31 -0700</pubDate>
        <link>http://denta.co/gerrymandering</link>
        <guid isPermaLink="true">http://denta.co/gerrymandering</guid>
        
        
        <category>politics</category>
        
      </item>
    
      <item>
        <title>Committing and Removing Files</title>
        <description>&lt;p&gt;This section of the tutorial will talk about the ‘commit’ step of the git work flow. We will also look at what happens when you remove a file from a git repo, and how to tell git about that changed file.&lt;/p&gt;

&lt;div&gt;&lt;b&gt;This terminal recording ca be found at &lt;a href=&quot;https://asciinema.org/a/37f6fp6jxe53xwvhxjx7box2z&quot;&gt; asciinema.org&lt;/a&gt;.&lt;/b&gt;&lt;/div&gt;

&lt;div class=&quot;hide-on-large-only&quot;&gt;
  &lt;a href=&quot;https://asciinema.org/a/37f6fp6jxe53xwvhxjx7box2z&quot;&gt;&lt;img class=&quot;responsive-img&quot; src=&quot;https://asciinema.org/a/37f6fp6jxe53xwvhxjx7box2z.png&quot; width=&quot;836&quot; /&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;div id=&quot;asciinemaContainer&quot; class=&quot;center-align hide-on-med-and-down &quot;&gt;
  &lt;div id=&quot;asciiLoader&quot; class=&quot;preloader-wrapper big active&quot;&gt;
    &lt;div class=&quot;spinner-layer&quot;&gt;
      &lt;div class=&quot;circle-clipper left&quot;&gt;
        &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;div class=&quot;gap-patch&quot;&gt;
        &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;div class=&quot;circle-clipper right&quot;&gt;
        &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/37f6fp6jxe53xwvhxjx7box2z.js&quot; id=&quot;asciicast-37f6fp6jxe53xwvhxjx7box2z&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(window).load(function() {

  $(&quot;#asciiLoader&quot;).hide();

 });



&lt;/script&gt;
&lt;/div&gt;

&lt;h2 id=&quot;committing-a-repo&quot;&gt;Committing a repo&lt;/h2&gt;

&lt;p&gt;Now that we made changes to our files, we want to save a ‘snapshot’ of the current project. This snapshot is called a commit. Each commit also has an attached message, that gives some information about the commit. To commit your files, we will type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &quot;put styles in a separate file.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, we are telling git to remember what the repository looked like at this point in time, and attaching a message of “put styles in a separate file.” This will help us remember in the future where the first commit was that added the style.css file.&lt;/p&gt;

&lt;h2 id=&quot;removing-files&quot;&gt;Removing files&lt;/h2&gt;
</description>
        <pubDate>Tue, 03 May 2016 02:15:31 -0700</pubDate>
        <link>http://denta.co/git-part-two-commiting</link>
        <guid isPermaLink="true">http://denta.co/git-part-two-commiting</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Adding and Staging Files.</title>
        <description>&lt;h2 id=&quot;cloning-a-repo&quot;&gt;Cloning a repo&lt;/h2&gt;

&lt;div class=&quot;right&quot;&gt;
&lt;img src=&quot;/assets/images/shoesforsnakes.svg&quot; /&gt;
&lt;i&gt;anyone who can come up with a better logo can earn some serious brownie points.&lt;/i&gt;
&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This section of the tutorial will cover how to add files to a repository. This section will also cover what it means to ‘stage’ and ‘commit’ files, and how both of these actions are different from a ‘push’.&lt;/p&gt;

&lt;p&gt;For the remainder of the tutorial, we will focus on Shoes for Snakes. This is a fictitious non-profit we made up, who we will be helping get their website ready for production.&lt;/p&gt;

&lt;p&gt;First, we will need to ‘clone’ our git repository. Think of a git repository as a bunch of files. We need to get these files onto whatever computer we are working on. To do this, we use the git clone command. The git clone command works by typing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/adenta/git-tutorial-repo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we type ‘git clone’ to specify we want to clone a repository somewhere else. we follow this command with the URL of the repository. After you run this command through your terminal, you will have the repository on your desktop.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-file&quot;&gt;Adding a file&lt;/h2&gt;

&lt;p&gt;Now that we have our repository on our computer, we can look at the files, and make changes to it. If we open the ‘index.html’ in a web browser, we see the starts of a public website. If we look at the index.html in a code editor, we see that the style tag contains our style information.&lt;/p&gt;

&lt;p&gt;If we want more than one page reading the same set of styles, we will need to move it to a separate file. To do this, we will create another file, called ‘style.css’. Create the style.css file in the same ‘git-tutorial-repo’ folder.&lt;/p&gt;

&lt;p&gt;Copy the styles from the style tag, and reference the external file from the index.html file. Your directory should look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    git-tutorial-repo
    --shoesforsnakes.svg
    --index.html
    --README.md
    --style.css&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Your index.html head tag should look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Shoes for Snakes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;style.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And your style.css:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;650px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ededed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that is it! Adding a file to a git repo is just about adding a file to the folder the repo is in.&lt;/p&gt;

&lt;h2 id=&quot;staging-the-file&quot;&gt;Staging the file&lt;/h2&gt;

&lt;p&gt;Now that we added the file, we have to stage it. When you add a file to a git repo, we have to tell git to track the file. This makes more sense when working in larger projects. To add our new ‘style.css’ file, we run the following in our git-tutorial-repo folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add style.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This does what you would imagine: It adds the style.css file to the git repository. Now whenever we change the file, git will keep track of the change. Git will only track the change when we commit the file to the repository. We will cover Commits in the next section.&lt;/p&gt;

&lt;h2 id=&quot;advanced-add-command&quot;&gt;Advanced add command&lt;/h2&gt;

&lt;p&gt;Sometimes, we want to add a bunch of files. To do that we:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This recursively adds all untracked files in the current git repository. If I made changes to the ‘index.html’ and the ‘style.css’ files, I could add them both by typing ‘git add .’.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 02:00:31 -0700</pubDate>
        <link>http://denta.co/git-part-one-adding-files</link>
        <guid isPermaLink="true">http://denta.co/git-part-one-adding-files</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Shell Commands Crash Course</title>
        <description>&lt;h2 id=&quot;what-is-a-shell&quot;&gt;What is a Shell&lt;/h2&gt;

&lt;p&gt;A shell is a tool we use to interact with a computer. It is pretty powerful. There are a few basic commands that will help you navigate the computer using a shell.&lt;/p&gt;

&lt;h2 id=&quot;frequently-used-shell-commands&quot;&gt;Frequently Used Shell Commands&lt;/h2&gt;

&lt;h3 id=&quot;ls&quot;&gt;ls&lt;/h3&gt;

&lt;p&gt;ls is a command that lists all files in the current directory. If you had a directory that had three files in it, file1.txt, file2.txt, and file3.txt, and you ran ls, you would see something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~# ls
    file1.txt  file2.txt  file3.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;cd&quot;&gt;cd&lt;/h3&gt;

&lt;p&gt;cd is a command that changes what directory you are currently in. If you are currently in directory A, and want to go up one level, you would use ‘../’ as the directory you want to change to. For example, if you have a folder called ‘Downloads’, you could access that directory contents by running cd Downloads:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~# &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Downloads/
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~/Downloads#&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;mkdir&quot;&gt;mkdir&lt;/h3&gt;

&lt;p&gt;mkdir is a command that creates a new directory. For example, to create a new directory called ‘files’ you would run ‘mkdir files’ as seen here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~# ls         
    Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~# mkdir files
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~# ls
    Desktop    Downloads  Pictures  Templates  files
    Documents  Music      Public    Videos&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;nano&quot;&gt;nano&lt;/h3&gt;

&lt;p&gt;nano opens a file in the nano text editor. If you want to create a file, you can run nano to create that file, and open it.&lt;/p&gt;

&lt;p&gt;We can see a demo of nano in action in the below demonstration.&lt;/p&gt;

&lt;h3 id=&quot;cat&quot;&gt;cat&lt;/h3&gt;

&lt;p&gt;cat prints the contents of a file. If we have a file named ‘file.txt’ which contains the words ‘this is a file’, we can see its contents using cat.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;(trusty)root@localhost:~# &lt;/span&gt;ls
Desktop    Downloads  Music     Public     Videos
Documents  file.txt   Pictures  Templates
&lt;span class=&quot;gp&quot;&gt;(trusty)root@localhost:~# &lt;/span&gt;cat file.txt
this is a file&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;rm&quot;&gt;rm&lt;/h3&gt;

&lt;p&gt;rm is a dangerous command. It removes files. If we have a text file named ‘file.txt’ we can remove it with rm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;(trusty)root@localhost:~# &lt;/span&gt;ls
Desktop    Downloads  Music     Public     Videos
Documents  file.txt   Pictures  Templates
&lt;span class=&quot;gp&quot;&gt;(trusty)root@localhost:~# &lt;/span&gt;rm file.txt
&lt;span class=&quot;gp&quot;&gt;(trusty)root@localhost:~# &lt;/span&gt;ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;trusty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;root@localhost:~#&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;demonstration&quot;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;Here is a short demo making use of all of these commands.&lt;/p&gt;

&lt;div&gt;&lt;b&gt;This terminal recording ca be found at &lt;a href=&quot;https://asciinema.org/a/34tyjhehmftwo04lbpekw3f4d&quot;&gt; asciinema.org&lt;/a&gt;.&lt;/b&gt;&lt;/div&gt;

&lt;div class=&quot;hide-on-large-only&quot;&gt;
  &lt;a href=&quot;https://asciinema.org/a/34tyjhehmftwo04lbpekw3f4d&quot;&gt;&lt;img class=&quot;responsive-img&quot; src=&quot;https://asciinema.org/a/34tyjhehmftwo04lbpekw3f4d.png&quot; width=&quot;836&quot; /&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;div id=&quot;asciinemaContainer&quot; class=&quot;center-align hide-on-med-and-down &quot;&gt;
  &lt;div id=&quot;asciiLoader&quot; class=&quot;preloader-wrapper big active&quot;&gt;
    &lt;div class=&quot;spinner-layer&quot;&gt;
      &lt;div class=&quot;circle-clipper left&quot;&gt;
        &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;div class=&quot;gap-patch&quot;&gt;
        &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;div class=&quot;circle-clipper right&quot;&gt;
        &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/34tyjhehmftwo04lbpekw3f4d.js&quot; id=&quot;asciicast-34tyjhehmftwo04lbpekw3f4d&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(window).load(function() {

  $(&quot;#asciiLoader&quot;).hide();

 });



&lt;/script&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 01 May 2016 01:50:31 -0700</pubDate>
        <link>http://denta.co/shell-demo</link>
        <guid isPermaLink="true">http://denta.co/shell-demo</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
        <category>ServeIT</category>
        
      </item>
    
      <item>
        <title>Intro to Git</title>
        <description>&lt;p&gt;Welcome to the first part of the ServeIT Github tutorial. This will be fast and painless.&lt;/p&gt;

&lt;h2 id=&quot;what-is-git&quot;&gt;What is Git?&lt;/h2&gt;
&lt;p&gt;Git is version control software. When you have many people working on a project, you need a way to track files. Git helps facilitate many people to work on the same project at the same time.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-need-to-use-it&quot;&gt;Why do I need to use it?&lt;/h2&gt;
&lt;p&gt;At Serve IT, we use Git to manage &amp;amp; deploy our projects. It is easier to type ‘git clone’ and have a bunch of files suddenly appear on your computer, than it would be to copy them manually. It is also be easier to type ‘git push’ than it is to manually use something like FTP to make changes to an application server.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-get-it-set-up&quot;&gt;How do I get it set up?&lt;/h2&gt;
&lt;p&gt;This tutorial is about how to use git effectively, not how to install it on your computer. If you need to install git, &lt;a href=&quot;https://help.github.com/articles/set-up-git/&quot;&gt;start here&lt;/a&gt;. Windows Users will need to use their command prompt. Mac and Linux users will use their Terminal.&lt;/p&gt;

&lt;p&gt;This tutorial will serve as a basic introduction to Git. This tutorial will not cover &lt;a href=&quot;https://desktop.github.com/&quot;&gt;Github Desktop&lt;/a&gt;. This is a graphic interface for Git. This is a useful tool, but not the purpose of this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cloning a repository&lt;/li&gt;
  &lt;li&gt;Adding and Staging files&lt;/li&gt;
  &lt;li&gt;Committing and Removing files&lt;/li&gt;
  &lt;li&gt;Making changes to a repository.&lt;/li&gt;
  &lt;li&gt;Pushing to repositories&lt;/li&gt;
  &lt;li&gt;Setting up remote repositories.&lt;/li&gt;
  &lt;li&gt;Intro to Branching&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, you should have git installed on your system. Run this command. You should get some sort of version number back.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For me, when I run this command, I see ‘git version 1.9.1’ as the output on the terminal. Make sure this command works before proceeding.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 01:45:31 -0700</pubDate>
        <link>http://denta.co/git-intro</link>
        <guid isPermaLink="true">http://denta.co/git-intro</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
        <category>ServeIT</category>
        
      </item>
    
      <item>
        <title>Sat Solver</title>
        <description>&lt;p&gt;Today in class my professor was describing &lt;a href=&quot;http://nrich.maths.org/781/note&quot;&gt;this&lt;/a&gt; problem. We thought about it for a while, and than he started describing the brute force solution. His code was six nested for loops. I assumed there had to be a better way to represent this problem, so I wrote a script to solve this and other similar problems.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; First: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Second: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Answer: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;trials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;letters in total, &amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; permutations.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builtList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builtList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builtList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;firstNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secondNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answerNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answerNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am happy with the solution I arrived at, other than two small points. I wish I could get out of the habit of thinking of lists in terms of their indexes. You can see on line 37 where I am generating each mapping of numbers to letters, my dictionary comprehension relies on ‘range(len(trial))’. This solution also runs in n! time, but that is just because of how &lt;em&gt;hard&lt;/em&gt; of a problem it is.&lt;/p&gt;

&lt;p&gt;This problem is &lt;a href=&quot;https://en.wikipedia.org/wiki/NP-completeness&quot;&gt;NP-Complete&lt;/a&gt;. This explains why it has such a high complexity. It is important to note that this problem is bounded where n&amp;lt;10, as you can only have that many unique letters representing unique numbers.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 18:45:31 -0700</pubDate>
        <link>http://denta.co/sat-solver</link>
        <guid isPermaLink="true">http://denta.co/sat-solver</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Exodus Easter Egg Hunt</title>
        <description>&lt;p&gt;Great time with Exodus Church this morning at 3rd street park here in Bloomington! Not too many pictures, because it was oepn to the public, and they didn’t want me taking pictures of anyone who did not go to the Church.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Mar 2016 10:45:31 -0700</pubDate>
        <link>http://denta.co/exodus-easter</link>
        <guid isPermaLink="true">http://denta.co/exodus-easter</guid>
        
        
        <category>balloons</category>
        
      </item>
    
      <item>
        <title>Chicago Restoration Ministries</title>
        <description>&lt;p&gt;We made a bunch of balloons at the Restoration Ministries in Harvey, IL!&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 00:45:31 -0800</pubDate>
        <link>http://denta.co/chicago-restoration-ministries</link>
        <guid isPermaLink="true">http://denta.co/chicago-restoration-ministries</guid>
        
        
        <category>balloons</category>
        
      </item>
    
  </channel>
</rss>
