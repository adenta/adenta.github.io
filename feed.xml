<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Denta</title>
    <description>Hi! I am Andrew Denta. I make balloons and websites. Feel free to check out my various projects!
</description>
    <link>http://denta.co/</link>
    <atom:link href="http://denta.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 May 2016 20:41:37 -0400</pubDate>
    <lastBuildDate>Tue, 24 May 2016 20:41:37 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Mario Chase</title>
        <description>&lt;p&gt;This semester, we did a research project on a game called Mario Chase. Rules can be found &lt;a href=&quot;http://www.mariowiki.com/Mario_Chase&quot;&gt;here&lt;/a&gt;. The game is basically hide-and-seek. The only change is that those who are seeking (toads) the person hiding  (Mario) know how far away they are from the person. The person hiding also gets to move around throughout the game. This problem would be trivial if we knew where on the board the seekers were, however; we do not have that metric. This is also not a problem that can be found through graph traversal methods, because the goal state (where Mario is) changes frequently. Graph search also does not work because we do not know &lt;em&gt;what&lt;/em&gt; the goal state is, only how far away we are from it.&lt;/p&gt;

&lt;p&gt;We ran several algorithms, and found the most efficient one for finding Mario was rather simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for each toad:
      replace the previous distance to mario with current distance.
      recalculate the toads distance to mario.

      if the previous distance is smaller than the current distance:
          move the toad in a random direction
      else:
          move the toad in the same direction
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It was great to work on this with my friends &lt;a href=&quot;https://www.linkedin.com/in/adam-peters-799707aa&quot;&gt;Adam Peters&lt;/a&gt; and Lee Hiler!&lt;/p&gt;

&lt;p&gt;EDIT: The github repository is located &lt;a href=&quot;https://github.com/adenta/Mario-Chase-Theatre&quot;&gt;here&lt;/a&gt;. The system was designed to model mario chase as simply as possible. We render the maps, and than we save them as JSON. We than made a quick node server to fetch these data files, and &lt;em&gt;view&lt;/em&gt; them in browser.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 04:45:31 -0400</pubDate>
        <link>http://denta.co/mario-chase</link>
        <guid isPermaLink="true">http://denta.co/mario-chase</guid>
        
        
        <category>project</category>
        
        <category>D3.js</category>
        
        <category>python</category>
        
        <category>JavaScript</category>
        
        <category>Materialize</category>
        
      </item>
    
      <item>
        <title>Gerrymandering</title>
        <description>&lt;p&gt;&lt;em&gt;The following is an excerpt from a term paper I am working on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every ten years, each of the 50 US states redraws the boundaries for
congressional districts. The lines are redrawn so all of the districts contain about an equal
number of people. Each congressional district votes on a person to go to the US House of
Representatives. As one can imagine, the political districts control a bit of power, which is
shifted around every time the districts are redrawn. It is commonly believed that whichever
party is in control of the redistricting process could misuse this ability to redraw districts, and
rig elections in their favor. This practice is referred to as “gerrymandering.” We can see how
this might work in this illustration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gerrymandering-explained.png&quot; alt=&quot;Gerrymandering in Action&quot; class=&quot;responsive-img materialboxed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I want to see if we can detect gerrymandering when looking at the results of many US elections. The Federal Election Commision (FEC) has a &lt;a href=&quot;http://www.fec.gov/pubrec/electionresults.shtml&quot;&gt;website&lt;/a&gt; that provides historic election results for congressional districts. Unfortunately, The spreadsheets they provide only go back as far as the year 2000, everything provided before that point is a PDF. This gives us eight different elections to look at.&lt;/p&gt;

&lt;p&gt;I went through, and scraped as much data as possible from these spreadsheets. They had inconsistent formatting, and I was able to get 97% of the elections into a JSON archive easily.&lt;/p&gt;

&lt;p&gt;The most interesting thing I found was the trends that present themselves when looking at gerrymandering on a graph. Below we see the percentage of Republican votes over total votes for state of North Carolina, over time. North Carolina had it’s districts redrawn after a &lt;a href=&quot;http://myfox8.com/2016/02/05/federal-court-invalidates-maps-of-north-carolinas-1st-12th-congressional-districts/&quot;&gt;widespread reporting&lt;/a&gt; of gerrymandering in the 2010 election cycle. We see that the districts cluster around a 60% concentration of Republicans. This is what is most advantageous for the Republicans: maintaining a majority in most states, and losing big in three.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/NC-Votes.png&quot; alt=&quot;Gerrymandering in Action&quot; class=&quot;responsive-img materialboxed&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;

&lt;p&gt;I have tried to make useful things for the open source community before, but always seem to fall short. I will be releasing the repository on github soon, but am not sure how useful it will be to others. When scraping the excel files, about 5% of the data was was not scraped properly. I did not need it for my analysis. It seems the issue was in the order that the political races were listed. If the first race was not the winning race, than my scraper did not return the proper output.&lt;/p&gt;

&lt;p&gt;When reading in the votes for each race, There seemed to be four cases. For example, with the number 56789, it might appear:
 - As a string (eg: “56,789”)
 - As a list (eg: “[56,789]”)
 - As a floating point (eg: 56789.0)
 - As a string saying, “Unopposed”&lt;/p&gt;

&lt;p&gt;For my sake, I saved unopposed elections with a flag of 0. I gave missing elections a flag of -1. I see this was a bad decision for others to use my data. I should have saved the flags as strings, leaving unopposed elections alone. This would have been more semantic. This would have also prevented people from doing some bad math, treating the -1’s and 0’s as literal values.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 May 2016 02:45:31 -0400</pubDate>
        <link>http://denta.co/gerrymandering</link>
        <guid isPermaLink="true">http://denta.co/gerrymandering</guid>
        
        
        <category>politics</category>
        
      </item>
    
      <item>
        <title>Committing and Removing Files</title>
        <description>&lt;p&gt;This section of the tutorial will talk about the ‘commit’ step of the git work flow. We will also look at what happens when you remove a file from a git repo, and how to tell git about that changed file.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 May 2016 05:15:31 -0400</pubDate>
        <link>http://denta.co/git-part-two-commiting</link>
        <guid isPermaLink="true">http://denta.co/git-part-two-commiting</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Adding and Staging Files.</title>
        <description>&lt;p&gt;This section of the tutorial will cover how to add files to a repository. This section will also cover what it means to ‘stage’ and ‘commit’ files, and how both of these actions are different from a ‘push’.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 05:00:31 -0400</pubDate>
        <link>http://denta.co/git-part-one-adding-files</link>
        <guid isPermaLink="true">http://denta.co/git-part-one-adding-files</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Intro to Git</title>
        <description>&lt;p&gt;Welcome to the first part of the ServeIT Github tutorial. This will be fast and painless.&lt;/p&gt;

&lt;h2 id=&quot;what-is-git&quot;&gt;What is Git?&lt;/h2&gt;
&lt;p&gt;Git is version control software. When you have many people working on a project, you need a way to track files. Git helps facilitate many people to work on the same project at the same time.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-need-to-use-it&quot;&gt;Why do I need to use it?&lt;/h2&gt;
&lt;p&gt;At Serve IT, we use Git to manage &amp;amp; deploy our projects. It is easier to type ‘git clone’ and have a bunch of files suddenly appear on your computer, than it would be to copy them manually. It is also be easier to type ‘git push’ than it is to manually use something like FTP to make changes to an application server.&lt;/p&gt;

&lt;p&gt;##How do I get it set up?
This tutorial is about how to use git effectively, not how to install it on your computer. If you need to install git, &lt;a href=&quot;https://help.github.com/articles/set-up-git/&quot;&gt;start here&lt;/a&gt;. Windows Users will need to use their command prompt. Mac and Linux users will use their Terminal.&lt;/p&gt;

&lt;p&gt;This tutorial will serve as a basic introduction to Git. Serve IT specific procedures will be explained at a later time. This tutorial will not cover &lt;a href=&quot;https://desktop.github.com/&quot;&gt;Github Desktop&lt;/a&gt;. This is a graphic interface for Git. This is a useful tool, but not the purpose of this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cloning a repository&lt;/li&gt;
  &lt;li&gt;Adding and Staging files&lt;/li&gt;
  &lt;li&gt;Committing and Removing files&lt;/li&gt;
  &lt;li&gt;Making changes to a repository.&lt;/li&gt;
  &lt;li&gt;Pushing to repositories&lt;/li&gt;
  &lt;li&gt;Setting up remote repositories.&lt;/li&gt;
  &lt;li&gt;Intro to Branching&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, you should have git installed on your system. Run this command. You should get some sort of version number back.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For me, when I run this command, I have ‘git version 1.9.1’. Make sure this command works before proceeding.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 04:45:31 -0400</pubDate>
        <link>http://denta.co/git-intro</link>
        <guid isPermaLink="true">http://denta.co/git-intro</guid>
        
        
        <category>series</category>
        
        <category>git</category>
        
        <category>ServeIT</category>
        
      </item>
    
      <item>
        <title>Sat Solver</title>
        <description>&lt;p&gt;Today in class my professor was describing &lt;a href=&quot;http://nrich.maths.org/781/note&quot;&gt;this&lt;/a&gt; problem. We thought about it for a while, and than he started describing the brute force solution. His code was six nested for loops. I assumed there had to be a better way to represent this problem, so I wrote a script to solve this and other similar problems.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; First: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Second: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Answer: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;trials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;letters in total, &amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; permutations.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builtList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builtList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builtList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;firstNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secondNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answerNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answerNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am happy with the solution I arrived at, other than two small points. I wish I could get out of the habit of thinking of lists in terms of their indexes. You can see on line 37 where I am generating each mapping of numbers to letters, my dictionary comprehension relies on ‘range(len(trial))’. This solution also runs in n! time, but that is just because of how &lt;em&gt;hard&lt;/em&gt; of a problem it is.&lt;/p&gt;

&lt;p&gt;This problem is &lt;a href=&quot;https://en.wikipedia.org/wiki/NP-completeness&quot;&gt;NP-Complete&lt;/a&gt;. This explains why it has such a high complexity. It is important to note that this problem is bounded where n&amp;lt;10, as you can only have that many unique letters representing unique numbers.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 21:45:31 -0400</pubDate>
        <link>http://denta.co/sat-solver</link>
        <guid isPermaLink="true">http://denta.co/sat-solver</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Exodus Easter Egg Hunt</title>
        <description>&lt;p&gt;Great time with Exodus Church this morning at 3rd street park here in Bloomington! Not too many pictures, because it was oepn to the public, and they didn’t want me taking pictures of anyone who did not go to the Church.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Mar 2016 13:45:31 -0400</pubDate>
        <link>http://denta.co/exodus-easter</link>
        <guid isPermaLink="true">http://denta.co/exodus-easter</guid>
        
        
        <category>balloons</category>
        
      </item>
    
      <item>
        <title>Chicago Restoration Ministries</title>
        <description>&lt;p&gt;We made a bunch of balloons at the Restoration Ministries in Harvey, IL!&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 03:45:31 -0500</pubDate>
        <link>http://denta.co/chicago-restoration-ministries</link>
        <guid isPermaLink="true">http://denta.co/chicago-restoration-ministries</guid>
        
        
        <category>balloons</category>
        
      </item>
    
      <item>
        <title>Pui Tak Balloons</title>
        <description>&lt;p&gt;We made a bunch of balloons at the Pui Tak Center!&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 03:45:31 -0500</pubDate>
        <link>http://denta.co/Pui-Tak</link>
        <guid isPermaLink="true">http://denta.co/Pui-Tak</guid>
        
        
        <category>balloons</category>
        
      </item>
    
      <item>
        <title>Feedback</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I often find myself behind a sound board. I have always enjoyed contributing to any sort of performance through operating sound and lighting equipment. One problem I found myself facing time and time again was that of communication. I would wind up needing to do fifty things at the same time, and would constantly be riddled with requests.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Can you turn me up in the monitors?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Hey Andrew, can you hear me back there? I don’t think my mic is working.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have this video we need you to play tonight. It’s on this DVD at the 42 minute mark. We just need thirty seconds from that point.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With many things trying to happen in a short period of time, I thought software might be a way to make my life easier. I spent an evening constructing a very basic MVP, to see if it might work for aggregating feedback from band members as to how well they can hear themselves.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;/h2&gt;
&lt;p&gt;My goal with Feedback was to make it so people in a band can communicate to a sound technician what to change about their dynamics as easily as possible. I used two views, one for the people making requests about wanting to be turned up or down, and another to display this information. I did not focus too much on security for this application, as there was no sensitive information being communicated. Band members select ‘who they are’, and then drag a slider where they want it to be. We can than see all these changes &lt;a href=&quot;feedback-iu.herokuapp.com/admin&quot;&gt;here&lt;/a&gt;. On the admin view, once all requests have been satisfied, you can press the thumbs up emoji button, to let everyone know that you processed their request. This will reset their sliders to the middle position.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;We tried it out a few times, and it was hard to get people to use the site to log requests as to what they needed. For the time being, it seems the status quo will be here to stay, until I can figure out what the bottleneck is in terms of allowing everyone to tell me what they need done in an orderly fashion.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Feb 2016 03:45:31 -0500</pubDate>
        <link>http://denta.co/feedback</link>
        <guid isPermaLink="true">http://denta.co/feedback</guid>
        
        
        <category>project</category>
        
        <category>socket.io</category>
        
        <category>JQuery</category>
        
        <category>JavaScript</category>
        
        <category>node</category>
        
      </item>
    
  </channel>
</rss>
